package com.android.dev.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.dev.data.db.PostInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POST_INFO".
*/
public class PostInfoDao extends AbstractDao<PostInfo, Long> {

    public static final String TABLENAME = "POST_INFO";

    /**
     * Properties of entity PostInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property Rate = new Property(2, Integer.class, "rate", false, "RATE");
        public final static Property LocationId = new Property(3, Long.class, "locationId", false, "LOCATION_ID");
        public final static Property CreateTime = new Property(4, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(5, Long.class, "updateTime", false, "UPDATE_TIME");
    };


    public PostInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PostInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POST_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CONTENT\" TEXT," + // 1: content
                "\"RATE\" INTEGER," + // 2: rate
                "\"LOCATION_ID\" INTEGER," + // 3: locationId
                "\"CREATE_TIME\" INTEGER," + // 4: createTime
                "\"UPDATE_TIME\" INTEGER);"); // 5: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POST_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PostInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        Integer rate = entity.getRate();
        if (rate != null) {
            stmt.bindLong(3, rate);
        }
 
        Long locationId = entity.getLocationId();
        if (locationId != null) {
            stmt.bindLong(4, locationId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(5, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(6, updateTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PostInfo readEntity(Cursor cursor, int offset) {
        PostInfo entity = new PostInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // rate
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // locationId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // updateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PostInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRate(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLocationId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PostInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PostInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
